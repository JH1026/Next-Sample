/* eslint-disable react/destructuring-assignment */
import React, { FC, useState, useEffect } from 'react';
import { useRouter } from 'next/router';

import Head from 'next/head';
import {
  TextField, Button, Select, MenuItem,
} from '@material-ui/core';
import db from '../../src/utils/firebase-admin';
import styles from '../../styles/Home.module.css';
import { store } from '../../src/utils/firebase';

type Props = {
  movie: {
    category: string,
    memo: string,
  },
  docId: string,
};

const Edit: FC<Props> = (data) => {
  const { movie, docId } = data;
  const router = useRouter();
  const { movieId } = router.query;

  const [memo, setMemo] = useState<string>(movie.memo);
  const [category, setCategory] = useState<string>(movie.category);
  const [isClickable, setIsClickable] = useState<boolean>(true);
  const [buttonText, setButtonText] = useState<string>('リンク保存する');

  useEffect(() => {
    if (movieId === undefined) {
      router.push('/');
    }
  }, []);

  const validation = () => {
    if (category === 'select') {
      alert('カテゴリーを選択してください');
      return false;
    }

    if (memo.length > 20) {
      alert('メモは20文字以下にしてください');
      return false;
    }

    return true;
  };

  const editAction = () => {
    if (validation() === false) {
      return;
    }

    setButtonText('リンク保存中...');
    setIsClickable(false);

    store.collection('movies').doc(docId)
      .update({
        category,
        memo,
      })
      .then(() => {
        alert('保存されました');
        setIsClickable(true);
        setButtonText('リンク保存する');
      })
      .catch((err) => {
        if (err.code === 'permission-denied') {
          alert('保存するにはログインする必要があります');
          setButtonText('ログインしてください');
        } else {
          alert('保存できませんでした...');
          setButtonText('リンク保存する');
        }
      });
  };

  const deleteAction = () => {
    if (!window.confirm('このリンクを削除してよろしいですか?')) {
      return;
    }
    store.collection('movies')
      .doc(docId)
      .delete();
    router.push('/');
  };

  return (
    <>
      <div className={styles.container}>
        <Head>
          <title>Link登録</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Select
          labelId="demo-simple-select-label"
          id="demo-simple-select"
          value={category}
          className={styles.inputSelect}
          onChange={(e: any) => setCategory(e.target.value)}
        >
          <MenuItem value="select">Select Category</MenuItem>
          <MenuItem value="cook">料理</MenuItem>
          <MenuItem value="commentary">実況</MenuItem>
          <MenuItem value="rta">RTA</MenuItem>
          <MenuItem value="tas">TAS</MenuItem>
        </Select>
        <TextField
          id="movieId"
          label="Input niconico URL"
          type="url"
          variant="outlined"
          className={styles.inputField}
          value={movieId}
          disabled
        />
        <TextField
          id="memo-field"
          label="Input Memo"
          type="text"
          variant="outlined"
          className={styles.inputField}
          value={memo}
          onChange={(e: any) => setMemo(e.target.value)}
        />
        <div className={styles.inputButtonField}>
          <Button
            variant="contained"
            color="primary"
            className={styles.inputButton}
            onClick={() => editAction()}
            disabled={!isClickable}
          >
            {buttonText}
          </Button>
        </div>

        <div
          className={styles.inputButtonField}
          style={{ marginTop: '50px' }}
        >
          <Button
            variant="contained"
            color="secondary"
            className={styles.inputButton}
            onClick={() => deleteAction()}
          >
            リンクを削除する
          </Button>
        </div>
        <p>
          ※保存、削除を行うにはログインする必要があります
        </p>

      </div>
    </>
  );
};

export async function getServerSideProps(context: any) {
  const { movieId } = context.query;

  const movies = [] as any;
  const docIds = [] as string[];
  const list = await db.collection('movies')
    .where('movieId', '==', movieId)
    .get();

  list.docs.forEach((doc: any) => {
    movies.push(doc.data());
    docIds.push(doc.id);
  });

  return { props: { movie: movies[0], docId: docIds[0] } };
}

export default Edit;
